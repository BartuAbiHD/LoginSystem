# LoginSystem Plugin Configuration by BartuAbiHD

# Specify which method to use for data storage.
# Available options: sqlite, h2, mysql, mariadb, postgresql, mongodb
storage:
  type: sqlite

# H2 settings (used if type is set to h2)
h2:
  # The name of the database file to be created in the plugin's folder (without extension).
  # For example: 'loginsystem_data' -> creates plugins/LoginSystem/loginsystem_data.mv.db
  filename: "loginsystem_data"

# MySQL/MariaDB settings
database:
  host: "localhost"
  port: 3306
  dbname: "loginsystem"
  user: "root"
  password: "password"

# PostgreSQL settings
postgresql:
  host: "localhost"
  port: 5432
  dbname: "loginsystem"
  user: "postgres"
  password: "password"

# MongoDB settings
mongodb:
  # Example connection URI. Edit according to your own server information.
  # Simple structure: "mongodb://host:port"
  # With authentication: "mongodb://user:password@host:port/?authSource=admin"
  connection-uri: "mongodb://localhost:27017"
  database: "loginsystem"

settings:

  # Check for new updates on SpigotMC when the server starts.
  update_checker:
    enabled: true

  # Specifies the language file to be used.
  # Example: en, tr, az, de
  # A list of all available languages can be found at: https://github.com/BartuAbiHD/LoginSystem/tree/main/messages
  messagesLanguage: "en"

  security:
    # Minimum password length.
    minPasswordLength: 6
    # Maximum password length.
    passwordMaxLength: 32
    # The hashing algorithm to be used.
    # Options: SHA256, BCRYPT, MD5
    # WARNING: Avoid using old and insecure algorithms like MD5.
    passwordHash: "SHA256"
    # If a password check fails, LoginSystem will also try to check with the following algorithms.
    # This setting is useful when migrating from one hashing method to another.
    # LoginSystem will automatically update the password to the new hash method if it matches a legacy one.
    # legacyHashes:
    # - 'SHA1'
    # - 'MD5'
    legacyHashes: []

    # Prevent unsafe (easily guessable) passwords from being used.
    # The list is case-insensitive.
    unsafePasswords:
      - '123456'
      - 'password'
      - 'qwerty'
      - '12345'
      - '54321'
      - '123456789'
      - 'help'
      - 'test'
      - 'deneme'

  restrictions:
    # Can unauthenticated players chat?
    # This setting also blocks all commands not listed below.
    allowChat: false
    # Should chat be hidden from unauthenticated players?
    hideChat: false

    # Allowed commands for unauthenticated players.
    allowCommands:
      - /login
      - /register
      - /l
      - /reg
      - /giris
      - /girisyap
      - /oturumac
      - /kayit
      - /kayitol
      - /kaydol

    # Maximum number of allowed registrations per IP.
    # A value of 0 means unlimited registrations!
    maxRegPerIp: 2

    # Minimum allowed username length.
    minNicknameLength: 3
    # Maximum allowed username length.
    maxNicknameLength: 16

    # When this setting is enabled, an already online player cannot be kicked due to "Logged in from another location".
    # This prevents potential security exploits.
    ForceSingleSession: true

    ForceSpawnLocOnJoin:
      # If enabled, every player that joins in one of the worlds listed below will be teleported
      # to the world's spawn point after successful authentication.
      # The player's quit location will be overwritten.
      enabled: false
      # World names where forcing the spawn location is required (Case-sensitive!)
      worlds:
        - world
        - world_nether

    # Should non-registered players be kicked immediately?
    kickNonRegistered: false
    # Should players be kicked on wrong password?
    kickOnWrongPassword: true

    # After how many seconds should players who fail to login or register be kicked?
    # Set to 0 to disable.
    timeout: 30

    # Regex pattern for allowed characters in player names.
    allowedNicknameCharacters: "[a-zA-Z0-9_]*"
    # Regex pattern for allowed characters in passwords.
    allowedPasswordCharacters: "[!-~]*"
    # Regex pattern for allowed characters in emails.
    allowedEmailCharacters: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$"
